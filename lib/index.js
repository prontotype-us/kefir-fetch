// Generated by CoffeeScript 1.9.3
var Kefir, default_options, defaults, fetch$, makeQueryString, timeoutPromise;

Kefir = require('kefir');

defaults = function(o1, o2) {
  var k, v;
  for (k in o2) {
    v = o2[k];
    if (o1[k] == null) {
      o1[k] = v;
    }
  }
  return o1;
};

makeQueryString = function(query) {
  var k, s, v;
  s = "?";
  for (k in query) {
    v = query[k];
    if (v != null) {
      s += k + "=" + v + "&";
    }
  }
  return s;
};

timeoutPromise = function(p, ms) {
  return new Promise(function(resolve, reject) {
    var clear_rej, clear_res, timeout_timeout;
    timeout_timeout = setTimeout(function() {
      return reject("Request timed out");
    }, ms);
    clear_res = function(res) {
      clearTimeout(timeout_timeout);
      return resolve(res);
    };
    clear_rej = function(rej) {
      clearTimeout(timeout_timeout);
      return reject(rej);
    };
    return p.then(clear_res, clear_rej);
  });
};

default_options = {
  headers: {
    'Accept': 'application/json',
    'Content-Type': 'application/json'
  },
  credentials: 'same-origin'
};

fetch$ = function(method, url, options) {
  var body, fetch_promise, query, timeout;
  if (options == null) {
    options = {};
  }
  options.method = method;
  if (query = options.query) {
    url += makeQueryString(query);
    delete options.query;
  }
  if (body = options.body) {
    options.body = JSON.stringify(body);
  }
  options = defaults(options, default_options);
  fetch_promise = fetch(url, options).then(function(res) {
    if (res.status === 200) {
      return res.json()["catch"](function(err) {
        return Promise.reject("Could not parse response");
      });
    } else {
      return res.text().then(function(json_string) {
        var e, json;
        if (!json_string.length) {
          return "Error " + res.status + " with no response";
        }
        try {
          json = JSON.parse(json_string);
          return json;
        } catch (_error) {
          e = _error;
          return json_string;
        }
      }).then(function(response) {
        Object.assign(response, {
          method: method,
          url: url,
          query: query,
          body: body
        });
        return Promise.reject(response);
      });
    }
  });
  if (timeout = options.timeout) {
    fetch_promise = timeoutPromise(fetch_promise, timeout);
  }
  return Kefir.fromPromise(fetch_promise);
};

module.exports = fetch$;
